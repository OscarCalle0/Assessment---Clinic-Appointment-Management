// <auto-generated />
using System;
using Appointment_Management.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Appointment_Management.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241115164506_FixSeeders")]
    partial class FixSeeders
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Appointment_Management.Models.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AvailabilityScheduleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time(6)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time(6)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AvailabilityScheduleId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("appointments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2024, 11, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 1,
                            EndTime = new TimeSpan(0, 9, 30, 0, 0),
                            Notes = "First appointment of the day",
                            PatientId = 11,
                            Reason = "Routine check-up",
                            StartTime = new TimeSpan(0, 9, 0, 0, 0),
                            Status = "Scheduled"
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2024, 11, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 2,
                            EndTime = new TimeSpan(0, 10, 30, 0, 0),
                            Notes = "Follow-up consultation",
                            PatientId = 12,
                            Reason = "Follow-up for previous diagnosis",
                            StartTime = new TimeSpan(0, 10, 0, 0, 0),
                            Status = "Scheduled"
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateTime(2024, 11, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 3,
                            EndTime = new TimeSpan(0, 11, 30, 0, 0),
                            Notes = "Routine check-up",
                            PatientId = 13,
                            Reason = "General check-up",
                            StartTime = new TimeSpan(0, 11, 0, 0, 0),
                            Status = "Scheduled"
                        },
                        new
                        {
                            Id = 4,
                            Date = new DateTime(2024, 11, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 4,
                            EndTime = new TimeSpan(0, 12, 30, 0, 0),
                            Notes = "Consultation for lab results",
                            PatientId = 14,
                            Reason = "Lab result discussion",
                            StartTime = new TimeSpan(0, 12, 0, 0, 0),
                            Status = "Scheduled"
                        },
                        new
                        {
                            Id = 5,
                            Date = new DateTime(2024, 11, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 5,
                            EndTime = new TimeSpan(0, 13, 30, 0, 0),
                            Notes = "Consultation for follow-up",
                            PatientId = 15,
                            Reason = "Follow-up consultation",
                            StartTime = new TimeSpan(0, 13, 0, 0, 0),
                            Status = "Scheduled"
                        },
                        new
                        {
                            Id = 6,
                            Date = new DateTime(2024, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 6,
                            EndTime = new TimeSpan(0, 14, 30, 0, 0),
                            Notes = "New patient consultation",
                            PatientId = 16,
                            Reason = "Initial consultation",
                            StartTime = new TimeSpan(0, 14, 0, 0, 0),
                            Status = "Scheduled"
                        },
                        new
                        {
                            Id = 7,
                            Date = new DateTime(2024, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 7,
                            EndTime = new TimeSpan(0, 15, 30, 0, 0),
                            Notes = "Consultation for chronic condition",
                            PatientId = 17,
                            Reason = "Management of chronic illness",
                            StartTime = new TimeSpan(0, 15, 0, 0, 0),
                            Status = "Scheduled"
                        },
                        new
                        {
                            Id = 8,
                            Date = new DateTime(2024, 11, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 8,
                            EndTime = new TimeSpan(0, 16, 30, 0, 0),
                            Notes = "Routine follow-up",
                            PatientId = 18,
                            Reason = "Check-up after treatment",
                            StartTime = new TimeSpan(0, 16, 0, 0, 0),
                            Status = "Scheduled"
                        },
                        new
                        {
                            Id = 9,
                            Date = new DateTime(2024, 11, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 9,
                            EndTime = new TimeSpan(0, 17, 30, 0, 0),
                            Notes = "Consultation for test results",
                            PatientId = 19,
                            Reason = "Discuss test results",
                            StartTime = new TimeSpan(0, 17, 0, 0, 0),
                            Status = "Scheduled"
                        },
                        new
                        {
                            Id = 10,
                            Date = new DateTime(2024, 11, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 10,
                            EndTime = new TimeSpan(0, 18, 30, 0, 0),
                            Notes = "Routine check-up",
                            PatientId = 11,
                            Reason = "General health check",
                            StartTime = new TimeSpan(0, 18, 0, 0, 0),
                            Status = "Scheduled"
                        });
                });

            modelBuilder.Entity("Appointment_Management.Models.AvailabilitySchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time(6)");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time(6)");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("availability_schedules");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DayOfWeek = 1,
                            DoctorId = 1,
                            EndTime = new TimeSpan(0, 17, 0, 0, 0),
                            StartTime = new TimeSpan(0, 9, 0, 0, 0),
                            Status = true
                        },
                        new
                        {
                            Id = 2,
                            DayOfWeek = 2,
                            DoctorId = 2,
                            EndTime = new TimeSpan(0, 17, 0, 0, 0),
                            StartTime = new TimeSpan(0, 9, 0, 0, 0),
                            Status = true
                        },
                        new
                        {
                            Id = 3,
                            DayOfWeek = 3,
                            DoctorId = 3,
                            EndTime = new TimeSpan(0, 17, 0, 0, 0),
                            StartTime = new TimeSpan(0, 9, 0, 0, 0),
                            Status = true
                        },
                        new
                        {
                            Id = 4,
                            DayOfWeek = 4,
                            DoctorId = 4,
                            EndTime = new TimeSpan(0, 17, 0, 0, 0),
                            StartTime = new TimeSpan(0, 9, 0, 0, 0),
                            Status = true
                        },
                        new
                        {
                            Id = 5,
                            DayOfWeek = 5,
                            DoctorId = 5,
                            EndTime = new TimeSpan(0, 17, 0, 0, 0),
                            StartTime = new TimeSpan(0, 9, 0, 0, 0),
                            Status = true
                        },
                        new
                        {
                            Id = 6,
                            DayOfWeek = 6,
                            DoctorId = 6,
                            EndTime = new TimeSpan(0, 17, 0, 0, 0),
                            StartTime = new TimeSpan(0, 9, 0, 0, 0),
                            Status = true
                        },
                        new
                        {
                            Id = 7,
                            DayOfWeek = 0,
                            DoctorId = 7,
                            EndTime = new TimeSpan(0, 17, 0, 0, 0),
                            StartTime = new TimeSpan(0, 9, 0, 0, 0),
                            Status = true
                        },
                        new
                        {
                            Id = 8,
                            DayOfWeek = 1,
                            DoctorId = 8,
                            EndTime = new TimeSpan(0, 17, 0, 0, 0),
                            StartTime = new TimeSpan(0, 9, 0, 0, 0),
                            Status = true
                        },
                        new
                        {
                            Id = 9,
                            DayOfWeek = 2,
                            DoctorId = 9,
                            EndTime = new TimeSpan(0, 17, 0, 0, 0),
                            StartTime = new TimeSpan(0, 9, 0, 0, 0),
                            Status = true
                        },
                        new
                        {
                            Id = 10,
                            DayOfWeek = 3,
                            DoctorId = 10,
                            EndTime = new TimeSpan(0, 17, 0, 0, 0),
                            StartTime = new TimeSpan(0, 9, 0, 0, 0),
                            Status = true
                        });
                });

            modelBuilder.Entity("Appointment_Management.Models.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Availability")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("SpecialtyId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SpecialtyId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("doctors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Availability = true,
                            SpecialtyId = 1,
                            Status = "Active",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Availability = true,
                            SpecialtyId = 2,
                            Status = "Active",
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            Availability = true,
                            SpecialtyId = 3,
                            Status = "Active",
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            Availability = true,
                            SpecialtyId = 4,
                            Status = "Active",
                            UserId = 4
                        },
                        new
                        {
                            Id = 5,
                            Availability = true,
                            SpecialtyId = 5,
                            Status = "Active",
                            UserId = 5
                        },
                        new
                        {
                            Id = 6,
                            Availability = true,
                            SpecialtyId = 6,
                            Status = "Active",
                            UserId = 6
                        },
                        new
                        {
                            Id = 7,
                            Availability = true,
                            SpecialtyId = 7,
                            Status = "Active",
                            UserId = 7
                        },
                        new
                        {
                            Id = 8,
                            Availability = true,
                            SpecialtyId = 8,
                            Status = "Active",
                            UserId = 8
                        },
                        new
                        {
                            Id = 9,
                            Availability = true,
                            SpecialtyId = 9,
                            Status = "Active",
                            UserId = 9
                        },
                        new
                        {
                            Id = 10,
                            Availability = true,
                            SpecialtyId = 10,
                            Status = "Active",
                            UserId = 10
                        });
                });

            modelBuilder.Entity("Appointment_Management.Models.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("UserId");

                    b.ToTable("logs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Action = "Created",
                            AppointmentId = 1,
                            TimeStamp = new DateTime(2024, 11, 15, 11, 45, 5, 881, DateTimeKind.Local).AddTicks(6801),
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Action = "Updated",
                            AppointmentId = 2,
                            TimeStamp = new DateTime(2024, 11, 15, 11, 45, 5, 881, DateTimeKind.Local).AddTicks(6822),
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            Action = "Deleted",
                            AppointmentId = 3,
                            TimeStamp = new DateTime(2024, 11, 15, 11, 45, 5, 881, DateTimeKind.Local).AddTicks(6823),
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            Action = "Created",
                            AppointmentId = 4,
                            TimeStamp = new DateTime(2024, 11, 15, 11, 45, 5, 881, DateTimeKind.Local).AddTicks(6825),
                            UserId = 4
                        },
                        new
                        {
                            Id = 5,
                            Action = "Updated",
                            AppointmentId = 5,
                            TimeStamp = new DateTime(2024, 11, 15, 11, 45, 5, 881, DateTimeKind.Local).AddTicks(6826),
                            UserId = 5
                        },
                        new
                        {
                            Id = 6,
                            Action = "Created",
                            AppointmentId = 6,
                            TimeStamp = new DateTime(2024, 11, 15, 11, 45, 5, 881, DateTimeKind.Local).AddTicks(6828),
                            UserId = 6
                        },
                        new
                        {
                            Id = 7,
                            Action = "Updated",
                            AppointmentId = 7,
                            TimeStamp = new DateTime(2024, 11, 15, 11, 45, 5, 881, DateTimeKind.Local).AddTicks(6829),
                            UserId = 7
                        },
                        new
                        {
                            Id = 8,
                            Action = "Created",
                            AppointmentId = 8,
                            TimeStamp = new DateTime(2024, 11, 15, 11, 45, 5, 881, DateTimeKind.Local).AddTicks(6830),
                            UserId = 8
                        },
                        new
                        {
                            Id = 9,
                            Action = "Updated",
                            AppointmentId = 9,
                            TimeStamp = new DateTime(2024, 11, 15, 11, 45, 5, 881, DateTimeKind.Local).AddTicks(6832),
                            UserId = 9
                        },
                        new
                        {
                            Id = 10,
                            Action = "Deleted",
                            AppointmentId = 10,
                            TimeStamp = new DateTime(2024, 11, 15, 11, 45, 5, 881, DateTimeKind.Local).AddTicks(6833),
                            UserId = 10
                        });
                });

            modelBuilder.Entity("Appointment_Management.Models.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("MedicalHistory")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("patients");

                    b.HasData(
                        new
                        {
                            Id = 11,
                            Address = "123 Main St",
                            BirthDate = new DateTime(1985, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicalHistory = "No known allergies",
                            UserId = 11
                        },
                        new
                        {
                            Id = 12,
                            Address = "456 Elm St",
                            BirthDate = new DateTime(1990, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicalHistory = "Asthma",
                            UserId = 12
                        },
                        new
                        {
                            Id = 13,
                            Address = "789 Oak St",
                            BirthDate = new DateTime(2000, 8, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicalHistory = "Diabetes type 1",
                            UserId = 13
                        },
                        new
                        {
                            Id = 14,
                            Address = "101 Pine St",
                            BirthDate = new DateTime(1995, 11, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicalHistory = "High blood pressure",
                            UserId = 14
                        },
                        new
                        {
                            Id = 15,
                            Address = "202 Birch St",
                            BirthDate = new DateTime(1980, 7, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicalHistory = "History of heart disease",
                            UserId = 15
                        },
                        new
                        {
                            Id = 16,
                            Address = "303 Cedar St",
                            BirthDate = new DateTime(1975, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicalHistory = "Allergic to penicillin",
                            UserId = 16
                        },
                        new
                        {
                            Id = 17,
                            Address = "404 Maple St",
                            BirthDate = new DateTime(2005, 6, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicalHistory = "No known medical issues",
                            UserId = 17
                        },
                        new
                        {
                            Id = 18,
                            Address = "505 Ash St",
                            BirthDate = new DateTime(2010, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicalHistory = "History of asthma",
                            UserId = 18
                        },
                        new
                        {
                            Id = 19,
                            Address = "606 Willow St",
                            BirthDate = new DateTime(2002, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicalHistory = "No known allergies",
                            UserId = 19
                        });
                });

            modelBuilder.Entity("Appointment_Management.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Doctor"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Patient"
                        });
                });

            modelBuilder.Entity("Appointment_Management.Models.Specialty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("specialties");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Heart specialist",
                            Name = "Cardiology"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Brain and nervous system specialist",
                            Name = "Neurology"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Children's healthcare specialist",
                            Name = "Pediatrics"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Bone and joint specialist",
                            Name = "Orthopedics"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Skin specialist",
                            Name = "Dermatology"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Women's reproductive health specialist",
                            Name = "Gynecology"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Mental health specialist",
                            Name = "Psychiatry"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Teeth and mouth care specialist",
                            Name = "Dentistry"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Eye health specialist",
                            Name = "Ophthalmology"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Ear, nose, and throat specialist",
                            Name = "ENT"
                        });
                });

            modelBuilder.Entity("Appointment_Management.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "johndoe@example.com",
                            Name = "John Doe",
                            Password = "1234",
                            RoleId = 2
                        },
                        new
                        {
                            Id = 2,
                            Email = "janesmith@example.com",
                            Name = "Jane Smith",
                            Password = "1234",
                            RoleId = 2
                        },
                        new
                        {
                            Id = 3,
                            Email = "mikejohnson@example.com",
                            Name = "Mike Johnson",
                            Password = "1234",
                            RoleId = 2
                        },
                        new
                        {
                            Id = 4,
                            Email = "emilydavis@example.com",
                            Name = "Emily Davis",
                            Password = "1234",
                            RoleId = 2
                        },
                        new
                        {
                            Id = 5,
                            Email = "sarahwilson@example.com",
                            Name = "Sarah Wilson",
                            Password = "1234",
                            RoleId = 2
                        },
                        new
                        {
                            Id = 6,
                            Email = "davidbrown@example.com",
                            Name = "David Brown",
                            Password = "1234",
                            RoleId = 2
                        },
                        new
                        {
                            Id = 7,
                            Email = "lisawhite@example.com",
                            Name = "Lisa White",
                            Password = "1234",
                            RoleId = 2
                        },
                        new
                        {
                            Id = 8,
                            Email = "tomclark@example.com",
                            Name = "Tom Clark",
                            Password = "1234",
                            RoleId = 2
                        },
                        new
                        {
                            Id = 9,
                            Email = "rachelee@example.com",
                            Name = "Rachel Lee",
                            Password = "1234",
                            RoleId = 2
                        },
                        new
                        {
                            Id = 10,
                            Email = "paulharris@example.com",
                            Name = "Paul Harris",
                            Password = "1234",
                            RoleId = 2
                        },
                        new
                        {
                            Id = 11,
                            Email = "annabrown@example.com",
                            Name = "Anna Brown",
                            Password = "1234",
                            RoleId = 3
                        },
                        new
                        {
                            Id = 12,
                            Email = "benjohnson@example.com",
                            Name = "Ben Johnson",
                            Password = "1234",
                            RoleId = 3
                        },
                        new
                        {
                            Id = 13,
                            Email = "clarawilson@example.com",
                            Name = "Clara Wilson",
                            Password = "1234",
                            RoleId = 3
                        },
                        new
                        {
                            Id = 14,
                            Email = "danielgreen@example.com",
                            Name = "Daniel Green",
                            Password = "1234",
                            RoleId = 3
                        },
                        new
                        {
                            Id = 15,
                            Email = "ellawhite@example.com",
                            Name = "Ella White",
                            Password = "1234",
                            RoleId = 3
                        },
                        new
                        {
                            Id = 16,
                            Email = "fionaturner@example.com",
                            Name = "Fiona Turner",
                            Password = "1234",
                            RoleId = 3
                        },
                        new
                        {
                            Id = 17,
                            Email = "georgeharris@example.com",
                            Name = "George Harris",
                            Password = "1234",
                            RoleId = 3
                        },
                        new
                        {
                            Id = 18,
                            Email = "helenclark@example.com",
                            Name = "Helen Clark",
                            Password = "1234",
                            RoleId = 3
                        },
                        new
                        {
                            Id = 19,
                            Email = "ivycooper@example.com",
                            Name = "Ivy Cooper",
                            Password = "1234",
                            RoleId = 3
                        },
                        new
                        {
                            Id = 20,
                            Email = "jackmoore@example.com",
                            Name = "Jack Moore",
                            Password = "1234",
                            RoleId = 3
                        },
                        new
                        {
                            Id = 21,
                            Email = "oscarcalle0@gmail.com",
                            Name = "Oscar Calle",
                            Password = "1234",
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("Appointment_Management.Models.Appointment", b =>
                {
                    b.HasOne("Appointment_Management.Models.AvailabilitySchedule", "AvailabilitySchedule")
                        .WithMany()
                        .HasForeignKey("AvailabilityScheduleId");

                    b.HasOne("Appointment_Management.Models.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Appointment_Management.Models.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AvailabilitySchedule");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Appointment_Management.Models.AvailabilitySchedule", b =>
                {
                    b.HasOne("Appointment_Management.Models.Doctor", "Doctor")
                        .WithMany("AvailabilitySchedules")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Appointment_Management.Models.Doctor", b =>
                {
                    b.HasOne("Appointment_Management.Models.Specialty", "Specialty")
                        .WithMany("Doctors")
                        .HasForeignKey("SpecialtyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Appointment_Management.Models.User", "User")
                        .WithOne("Doctor")
                        .HasForeignKey("Appointment_Management.Models.Doctor", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Specialty");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Appointment_Management.Models.Log", b =>
                {
                    b.HasOne("Appointment_Management.Models.Appointment", "Appointment")
                        .WithMany()
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Appointment_Management.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Appointment_Management.Models.Patient", b =>
                {
                    b.HasOne("Appointment_Management.Models.User", "User")
                        .WithOne("Patient")
                        .HasForeignKey("Appointment_Management.Models.Patient", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Appointment_Management.Models.User", b =>
                {
                    b.HasOne("Appointment_Management.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Appointment_Management.Models.Doctor", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("AvailabilitySchedules");
                });

            modelBuilder.Entity("Appointment_Management.Models.Patient", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("Appointment_Management.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Appointment_Management.Models.Specialty", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("Appointment_Management.Models.User", b =>
                {
                    b.Navigation("Doctor")
                        .IsRequired();

                    b.Navigation("Patient")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
